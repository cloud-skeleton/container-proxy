---
# @TODO: Needs fully compatible and transparent podman-compose support
x-podman:
  in_pod: false

x-templates:
  service: &service
    healthcheck: &service-healthcheck
      interval: 10s
      start_interval: 2s
      start_period: 10s
      timeout: 3s
    mem_swappiness: 0
    networks:
      - bridge
    restart: unless-stopped
    security_opt:
      - label:disable
    userns_mode: keep-id:uid=0,gid=0

configs:
  security-file-server:
    content: |
      [general]
      compression-level = "best"
      health = true
      log-level = "warn"

  traefik-base:
    content: |
      ---
      api:
        basePath: /traefik/
      certificatesResolvers:
        letsencrypt:
          acme:
            email: ${CERTIFICATE_EMAIL:?}
            keyType: EC384
            tlsChallenge: true
            storage: /certificates/acme.json
      entrypoints:
        http:
          address: :80
          http:
            encodeQuerySemicolons: true
            redirections:
              entryPoint:
                permanent: true
                to: https
          http3: {}
          reusePort: true
        https:
          address: :443
          asDefault: true
          http:
            encodeQuerySemicolons: true
            middlewares:
              - security-headers@file
            tls:
              certResolver: letsencrypt
              domains:
                - main: ${HOSTNAME:?}
          http3: {}
          reusePort: true
      experimental:
        plugins:
          staticResponse:
            moduleName: github.com/tuxgal/traefik_inline_response
            version: v0.1.2
      global:
        checkNewVersion: false
        sendAnonymousUsage: false
      log:
        level: INFO
      ping:
        manualRouting: true
      providers:
        docker:
          exposedByDefault: false
          network: proxy_bridge
          watch: true
        file:
          filename: /etc/traefik/providers.yml
      ...

  traefik-providers:
    content: |
      ---
      http:
        routers:
          ssl-labs-certificate-validation:
            middlewares:
              - success-response
            priority: 1000
            rule: >
              Host("${HOSTNAME:?}") &&
              (ClientIP("${SSL_LABS_IPV4_CIDR:-64.41.200.0/24}") || ClientIP("${SSL_LABS_IPV6_CIDR:-2600:c02:1020:4202::/64}"))
            service: noop@internal

          traefik-dashboard:
            middlewares:
              - admin-ip-only
            priority: 1000
            rule: >
              Host("${HOSTNAME:?}") &&
              (PathPrefix("/traefik/api/") || PathPrefix("/traefik/dashboard/"))
            service: api@internal

          traefik-dashboard-redirect:
            middlewares:
              - traefik-dashboard-redirect
            priority: 1000
            rule: Host("${HOSTNAME:?}") && PathRegexp("^/traefik/?$")
            service: noop@internal

          traefik-ping:
            middlewares:
              - local-ip-only
            priority: 1000
            rule: Host("${HOSTNAME:?}") && Path("/traefik/ping")
            service: ping@internal

        middlewares:
          admin-ip-only:
            IPAllowList:
              sourceRange:
                - ${ADMIN_ALLOW_IP_CIDR:?}

          local-ip-only:
            IPAllowList:
              sourceRange:
                - 127.0.0.0/8
                - ::1/128

          security-headers:
            headers:
              browserXssFilter: true
              contentTypeNosniff: true
              forceStsHeader: true
              frameDeny: true
              stsIncludeSubdomains: true
              stsPreload: true
              stsSeconds: 31536000

          success-response:
            plugin:
              staticResponse:
                fallback:
                  statusCode: 200

          traefik-dashboard-redirect:
            redirectRegex:
              regex: "^(.+)/traefik/?$"
              replacement: "$${1}/traefik/dashboard/"
              permanent: true

        serversTransports:
          self-signed:
            insecureSkipVerify: true

      tls:
        options:
          default:
            minVersion: VersionTLS12
            cipherSuites:
              - TLS_AES_256_GCM_SHA384
              - TLS_CHACHA20_POLY1305_SHA256
              - TLS_AES_128_GCM_SHA256
              - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
              - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            curvePreferences:
              - secp521r1
              - secp384r1
              - x25519
              - secp256r1
            sniStrict: true
      ...

name: proxy

networks:
  bridge:

services:
  security-file-server:
    <<: *service
    configs:
      - mode: 0440
        source: security-file-server
        target: /config.toml
    depends_on:
      traefik:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 8M
    healthcheck:
      <<: *service-healthcheck
      test:
        - CMD
        - wget
        - --spider
        - -q
        - http://127.0.0.1/health
    image: joseluisq/static-web-server:2.36.0-alpine
    labels:
      - traefik.enable=true
      - traefik.http.routers.security-file.priority=1000
      - traefik.http.routers.security-file.rule=Host("${HOSTNAME:?}") && Path("/.well-known/security.txt")
    volumes:
      - ./security/security.txt:/public/.well-known/security.txt:ro

  traefik:
    <<: *service
    configs:
      - mode: 0440
        source: traefik-base
        target: /etc/traefik/traefik.yml
      - mode: 0440
        source: traefik-providers
        target: /etc/traefik/providers.yml
    deploy:
      resources:
        limits:
          memory: 48M
    extra_hosts:
      - ${HOSTNAME:?}:127.0.0.1
    healthcheck:
      <<: *service-healthcheck
      # @TODO: Leaving this as workaround until https://github.com/traefik/traefik/issues/11593 is fixed
      test:
        - CMD
        - wget
        - --spider
        - -q
        - https://${HOSTNAME:?}/traefik/ping
    image: traefik:3.3.4
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock:ro
      - ./certificates:/certificates
...
